from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import create_engine
from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, Date
from sqlalchemy.orm import sessionmaker, scoped_session, relationship, backref
import datetime

# db interactions with sessions
engine = create_engine("sqlite:///news.db", echo=True)
session = scoped_session(sessionmaker(bind=engine, autocommit=False, autoflush=False))

Base = declarative_base()  # required for sqlalchemy magics
Base.query = session.query_property()


def now():
    return datetime.datetime.now()

# think about table names, not pluralizing ALL THE THINGS

# the flow:
# user login => fetch all stories and classify for logged in user
# --> after classification, shuttle into queue w/user_id, story_id, probability
# --> pull top (and a few lower) stories from queue and display on news page


class Users(Base):
    __tablename__ = "users"

<<<<<<< HEAD
    id = Column(Integer, primary_key=True)
    email = Column(String(64))
    password = Column(String(64))
    name = Column(String(128))
=======
	id = Column(Integer, primary_key=True)
	email = Column(String(64))
	password = Column(String(64))
	name = Column(String(128), nullable=True)
>>>>>>> demo_day


# story table: for all users' use, no foreign keys
class Stories(Base):
    __tablename__ = "stories"  # store instances of this class in tbl 'stories'

    id = Column(Integer, primary_key=True)
    title = Column(String(128))
    abstract = Column(String(256))
    url = Column(String(128))
    source = Column(String(128))


# mapping table: predicted relationship b/t user and story
class Queue(Base):
    __tablename__ = "queue"
<<<<<<< HEAD

    id = Column(Integer, primary_key=True)
    # user_id = Column(Integer, ForeignKey("users.id"))
    story_id = Column(Integer, ForeignKey("stories.id"))
    user_id = Column(Integer, ForeignKey("users.id"))
    score = Column(Integer)  # calculated fisher probability for this item
    liked = Column(Integer)  # 0:Falst, 1:True
    create_time = Column(DateTime, default=now())

    story = relationship("Stories", backref=backref("queue", order_by=id))
    user = relationship("Users", backref=backref("queue", order_by=id))

=======

    id = Column(Integer, primary_key=True)
    # user_id = Column(Integer, ForeignKey("users.id"))
    story_id = Column(Integer, ForeignKey("stories.id"))
    user_id = Column(Integer, ForeignKey("users.id"))
    score = Column(Integer)  # calculated fisher probability for this item
    liked = Column(Integer, nullable=True)  # 0:Falst, 1:True

    story = relationship("Stories", backref=backref("queue", order_by=id))
    user = relationship("Users", backref=backref("queue", order_by=id))
>>>>>>> demo_day

class InitStories(Base):
    __tablename__ = "initstories"

    id = Column(Integer, primary_key=True)
    title = Column(String(128))
    abstract = Column(String(256))
    url = Column(String(128))


class FC(Base):
    __tablename__ = "fc"  # for feature classification

    id = Column(Integer, primary_key=True)
    feature = Column(String(64))
    category = Column(String(32))
    count = Column(Integer)
    user_id = Column(Integer, ForeignKey("users.id"))

    user = relationship("Users", backref=backref("fc", order_by=id))


class CC(Base):
    __tablename__ = "cc"  # for category classification

    id = Column(Integer, primary_key=True)
    category = Column(String(32))
    count = Column(Integer)
    user_id = Column(Integer, ForeignKey("users.id"))

    user = relationship("Users", backref=backref("cc", order_by=id))
### End class declarations


def connect():
    global ENGINE
    global Session  # a class generated by SQLAlchemy, describing how to interact with the db

    ENGINE = create_engine("sqlite:///news.db", echo=True)
    Session = sessionmaker(bind=ENGINE)  # instantiate a session and return the instance below (can later use session = Session())
    return Session()


def main():
    """For when we need to, you know, do stuff"""
    pass


if __name__ == "__main__":
    main()
